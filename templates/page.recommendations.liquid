<div id="products"></div>
<script>
  // Parsing the url paramaters and data and store them in global variable "params"
  var params = window.location.search.substr(1).split('&').reduce(function (q, query) {
    var chunks = query.split('=')
    var key = chunks[0]
    var value = chunks[1]
    return (q[key] = value, q)
  }, {})

  // Storing product recommendations in another global variable
  var product_handles = (params['products'] || "").split(',')

  // Calling Shopify api to retrieve the products data
  Promise.all(product_handles.map(function (product) {
    return new Promise(function (resolve, reject) {
      fetch('/products/' + product + '.json')
      .then(function(result) { 
        // Making sure that the product actually exists
        if (result.status !== 404) {
          return result.json()
        } else {
          return { product: null }
        }
      })
      .then(function(data) { 
        console.log(data, "data");
        resolve(data.product)
      })
      .catch(reject)
    })
  }))
  .then(function (products) {
    // Filtering out the products list if it had any removed products
    products = products.filter(function (product) { return !!product })
    
    // The product grid template    
    var product_template = function(product, index) {
      return `
<div class="product" itemprop="itemListElement" itemscope
    itemtype="http://schema.org/Product">
    <a href="/products/${product.handle}" itemprop="url">
        ${product.images.length ? `
        <div class="product_image">
            <img src="${product.images[0].src}" alt="${product.title}" />
        </div>` : ""}
        <div class="info">
            <span class="title" itemprop="name">${product.title}</span>
            <span class="price" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                <meta itemprop="price" content="${product.variants[0].price}" />
                <meta itemprop="priceCurrency" content="USD" />
                <link itemprop="availability" href="http://schema.org/InStock">
                <span class="money">$${product.variants[0].price}</span>
            </span>
        </div>
    </a>
</div>`
    }

    // group by tags
    
    let incontinence = products.filter(product => product.product_type === 'Incontinence');
    let vision = products.filter(product => product.product_type === 'Vision');
    let mobility = products.filter(product => product.product_type === 'mobility');
    let memory = products.filter(product => product.product_type === 'Memory');
    let hands_arms= products.filter(product => product.product_type === 'Hands + Arms');

    // Fill the resulted products grid in the #products element
    if(incontinence.length > 0) {
    document.getElementById("products").innerHTML += `<div class='products-container'> <span class='tag'>incontinence</span>${incontinence.map(product_template).join('')} <div>`
    }
    if(vision.length > 0) {
    document.getElementById("products").innerHTML += `<div class='products-container'> <span class='tag'>vision</span>${vision.map(product_template).join('')} <div>`
    }
    if(mobility.length > 0) {
    document.getElementById("products").innerHTML += `<div class='products-container'> <span class='tag'>mobility</span>${mobility.map(product_template).join('')} <div>`
    }
    if(memory.length > 0) {
    document.getElementById("products").innerHTML += `<div class='products-container'> <span class='tag'>memory</span>${memory.map(product_template).join('')} <div>`
    }
    if(hands_arms.length > 0) {
    document.getElementById("products").innerHTML += `<div class='products-container'> <span class='tag'>hands_arms</span>${hands_arms.map(product_template).join('')} <div>`
    }

  })
</script>
{% style %}
  .tag {
    position: absolute;
    top: 0;
    left: 0;
    background: #2C9340;
    border-radius: 60px;
    color: white;
    letter-spacing: 2px;
    padding: 0.5rem 1rem;
    font-size: 12px;
    text-transform: uppercase;
  }
  a {
    color: #333;
  }
  #products {
    max-width: 800px;
    margin: 0 auto;
    margin-top: 2rem;
  }
  .product {
    border: 1px solid black;
    border-radius: 25px;
    padding: 1rem;
  }
  .products-container {
    padding: 4rem;
    position: relative;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 15px;
  }
/*   .products-container {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: flex-end;
    justify-content: center;
  }

  .product {
    width: 24%;
    margin: 1%;
    display: flex;
    position: relative;
    align-items: center;
    flex-direction: column;
    justify-content: center;
  }
 */
  .product a {
    text-decoration: none;
  }

  .product .info {
    text-align: center;
  }
{% endstyle %}